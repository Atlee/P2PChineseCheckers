U = human user
C = game client
H = hub

Note: C always trusts H and knows H's public key, K_H
Note: H knows the public key, K_user, of each registered user

--------------------------------------------------------------------------------

Protocol for new user registration...

[1]  C -> U:  new user:pass ?
[2]  U -> C:	user:pass
[3]  C -> H:	REGISTER, user
			
if "user" already in use:
[4]  H -> C:	Sign({ IN USE, user }, k_H)
[5]  C:		Ver({ IN USE, user }, K_H)
[6]  C -> U:	"user" already in use; goto [1]
			
else:
[4]  H -> C:	Sign({ AVAILABLE, user }, k_H)
[5]  C:		Ver({ AVAILABLE, user }, K_H), generate K_user/k_user
[6]  C -> H:	Sign({ user, K_user }, k_user)
[7]  H:		if Ver({ user, K_user }, K_user), then bind <<user, K_user>>K_H
[8]  H -> C:	Sign({ <<user, K_user>>K_H }, k_H)
[9]  C:		Ver({ <<user, K_user>>K_H }, K_H) and associate this certificate
                  with user:pass in local KeyStore
[10] C -> U:    success!

--------------------------------------------------------------------------------

Protocol for user login & establishing a peer-to-hub connection...

[1]  C -> U:	user:pass ?
[2]  U -> C:	user:pass
[3]  C:		if user:pass exists, retrieve K_user/k_user; else goto [1]
[4]  C -> H:	LOGIN, user
[5]  H -> C: 	Sign({ CHALLENGE, user, n }, k_H)		**[n is fresh at H]**
[6]  C -> H:	Sign({ CHALLENGE, user, n }, k_user)
[5]  H:		Ver({ n }, K_user)
[6]  H -> C:	Sign({ WELCOME, user, n }, k_H)
[7]  C:		Ver({ WELCOME, user, n }, K_H)
[8]  C -> U:    success!

The session ID, n, must be included in all subsequent messages between C and
H until the connection is closed.

--------------------------------------------------------------------------------

Protocol for establishing a peer-to-peer connection...

C1 = game client, user1 logged in
C2 = game client, user2 logged in

Note: If C1 does not know <user2, K_user2>, it can ask H
Note: If C2 does not know <user1, K_user1>, it can ask H

[1]  C1 -> C2:	Sign({ HI, user1, n }, k_user1)		**[n is fresh at C1]**
[2]  C2:	Ver({ HI, user1, n }, K_user1)
[3]  C2 -> C1:	Sign({ HI BACK, user2, n }, k_user2)
[4]  C1:	Ver({ HI BACK, user2, n }, K_user2)

The session ID, n, must be included in all subsequent messages between C1 and
C2 until the connection is closed.

--------------------------------------------------------------------------------

UPDATED 3/25

--------------------------------------------------------------------------------

Protocol for establishing a shared key between a user U and the hub H

C: Generate a new SHARED key k_C  //k_C must be unique for this to work
C->H: Enc{k_C, K_H}
H: Dec{k_C, k_H} and save k_C for all further communication with C

--------------------------------------------------------------------------------

Protocol for new user registration...

1: C->U: username, pass?
2: U->C: username, pass
3: C and H establish a shared key k_C
4: C->H: Enc{username, password, k_C}
5: H: Dec{username, password, k_C}
   if username in use:
	H->C: Enc{REGISTRATION_FAILURE, k_C}
   else:
	H->C: Enc{REGISTRATION_SUCCESS, k_C}
6: C: if Dec{message, k_C} is equal to REGISTRATION_SUCCESS
	C->U: Success
      else:
	C->U: Failure
