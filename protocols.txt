U = human user
C = game client
H = hub

Note: C always trusts H and knows H's public key, K_H
Note: H knows each the public key, K_user, of each registered user

--------------------------------------------------------------------------------

Protocol for new user registration...

[1]  C -> U:  new user:pass ?
[2]  U -> C:	user:pass
[3]  C -> H:	CREATE, user
			
if "user" already in use:
[4]  H -> C:	Sign({ IN USE, user }, k_H)
[5]  C:		Ver({ IN USE, user }, K_H)
[6]  C -> U:	"user" already in use; goto [1]
			
else:
[4]  H -> C:	Sign({ AVAILABLE, user }, k_H)
[5]  C:		Ver({ AVAILABLE, user }, K_H), generate K_user/k_user and
                  associate this key pair with user:pass on local machine
[6]  C -> H:	Sign({ user, K_user }, k_user)
[7]  H:		if Ver({ user, K_user }, K_user), then bind <user, K_user>
[8]  H -> C:	Sign({ OK, user }, k_H)
[9]  C:		Ver({ OK, user }, K_H)
[10] C -> U:    success!

--------------------------------------------------------------------------------

Protocol for user login & establishing a client-to-hub connection...

[1]  C -> U:	user:pass ?
[2]  U -> C:	user:pass
[3]  C:		if user:pass exists, retrieve K_user/k_user; else goto [1]
[4]  C -> H:	Sign({ LOGIN, user, n }, k_user)	**[n is fresh at C]**
[5]  H:		Ver({ LOGIN, user, n }, K_user) and generate K_shared
[6]  H -> C:	Sign({ WELCOME, user, n }, k_H)
[7]  C:		Ver({ WELCOME, user, n }, K_H)
[8]  C -> U:    success!

The session ID, n, must be included in all subsequent messages between C and
H until the connection is closed.

--------------------------------------------------------------------------------

Protocol for establishing a client-to-client (P2P) connection...

C1 = game client, user1 logged in
C2 = game client, user2 logged in

Note: If C1 does not know <user2, K_user2>, it can ask H
Note: If C2 does not know <user1, K_user1>, it can ask H

[1]  C1 -> C2:	Sign({ HI, user1, n }, k_user1)		**[n is fresh at C1]**
[2]  C2:	Ver({ HI, user1, n }, K_user1)
[3]  C2 -> C1:	Sign({ HI, user2, n }, k_user2)
[4]  C1:	Ver({ HI, user2, n }, K_user2)

The session ID, n, must be included in all subsequent messages between C1 and
C2 until the connection is closed.

--------------------------------------------------------------------------------
